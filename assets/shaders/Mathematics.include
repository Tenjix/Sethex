// --------------------------------------------------------------------------------------------------------------------------
// provides matematical constants and functions
// --------------------------------------------------------------------------------------------------------------------------

const float Tau = 6.28318530717958647693;
const float Tau_Inverse = 1.0 / Tau;
const float Tau_Half = Tau / 2.0;
const float Tau_Quarter = Tau / 4.0;
const float Pi = Tau_Half;
const float Pi_Inverse = 1.0 / Pi;
const float Pi_Half = Tau_Quarter;
const float Sqrt_2 = 1.41421356237309504880;
const float Sqrt_2_Inverse = 1.0 / Sqrt_2;
const float Sqrt_3 = 1.73205080756887729353;
const float Sqrt_3_Inverse = 1.0 / Sqrt_3;
const float One_Third = 1.0 / 3.0;
const float Two_Thirds = 2.0 / 3.0;

// converts signed range [-1,+1] to to unsigned [0,1]
float to_unsigned_range(float value) { return value * 0.5 + 0.5; }
vec2 to_unsigned_range(vec2 value) { return value * 0.5 + 0.5; }
vec3 to_unsigned_range(vec3 value) { return value * 0.5 + 0.5; }
vec4 to_unsigned_range(vec4 value) { return value * 0.5 + 0.5; }

// converts unsigned range [0,1] to to signed [-1,+1]
float to_signed_range(float value) { return (value - 0.5) * 2.0; }
vec2 to_signed_range(vec2 value) { return (value - 0.5) * 2.0; }
vec3 to_signed_range(vec3 value) { return (value - 0.5) * 2.0; }
vec4 to_signed_range(vec4 value) { return (value - 0.5) * 2.0; }

// creates a rotation matrix
mat2 rotation(float angle) {
	float sinus = sin(angle), cosinus = cos(angle);
	return mat2(cosinus, -sinus, sinus, cosinus);
}

// projects "value" into the wrapping range "range_begin" to "range_end"
int project(int value, int range_begin, int range_end) {
	int range_size = (range_end + 1) - range_begin;
	if (value < range_begin) value += range_size * ((range_begin - value) / range_size + 1);
	return range_begin + (value - range_begin) % range_size;
}

// Comparator Functions

// returns 1.0 if "one" == "two", 0.0 otherwise 
float equal(float one, float two) {
	return step(one, two) * step(two, one);
}

// returns 1.0 if "value" < "other", 0.0 otherwise 
float smaller(float value, float other) {
	return 1.0 - step(other, value);
}

// returns 1.0 if "value" <= "other", 0.0 otherwise 
float smaller_or_equal(float value, float other) {
	return max(smaller(value, other), equal(value, other));
}

// returns 1.0 if "value" > "other", 0.0 otherwise 
float greater(float value, float other) {
	return step(other, value) * (1.0 - equal(value, other));
}

// returns 1.0 if "value" >= "other", 0.0 otherwise 
float greater_or_equal(float value, float other) {
	return step(other, value);
}

// returns 1.0 if "value" lies within [minimum, maximum], 0.0 otherwise 
float within(float value, float minimum, float maximum) {
	return greater_or_equal(value, minimum) * smaller_or_equal(value, maximum);
}

// returns 1.0 if "value" lies without of [minimum, maximum], 0.0 otherwise 
float without(float value, float minimum, float maximum) {
	return max(smaller(value, minimum), greater(value, maximum));
}

// returns "satisfied" if "condition" is true, "unsatisfied" otherwise 
float choose(bool condition, float satisfied, float unsatisfied) {
	float c = float(condition); 
	return c * satisfied + (1.0 - c) * unsatisfied;
}

// Easing Functions

float ease_sine_in(float t) {
	return sin((t - 1.0) * Tau_Quarter) + 1.0;
}

float ease_sine_out(float t) {
	return sin(t * Tau_Quarter);
}

float ease_sine_in_out(float t) {
  return -0.5 * (cos(Tau_Half * t) - 1.0);
}

float ease_quadratic_in(float t) {
	return t * t;
}

float ease_quadratic_out(float t) {
	return -t * (t - 2.0);
}

float ease_quadratic_in_out(float t) {
	float tt2 = 2.0 * t * t;
	return t < 0.5 ? tt2 : -tt2 + (4.0 * t) - 1.0;
}

float ease_cubic_in(float t) {
	return t * t * t;
}

float ease_cubic_out(float t) {
	t = t - 1.0;
	return t * t * t + 1.0;
}

float ease_cubic_in_out(float t) {
	return t < 0.5 ? (4.0 * t * t * t) : (0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0);
}

float ease_quartic_in(float t) {
	t = t * t;
	return t * t;
}

float ease_quartic_out(float t) {
	return pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;
}

float ease_quartic_in_out(float t) {
	return t < 0.5 ? (8.0 * pow(t, 4.0)) : (-8.0 * pow(t - 1.0, 4.0) + 1.0);
}
